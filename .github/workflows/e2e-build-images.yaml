name: Build image templates for E2E tests

on:
  workflow_dispatch:
    inputs:
      codename:
        description: 'Comma-separated list of codenames to build for (e.g. "mantic", "focal") - will build for all supported releases if not specified'
        type: string
        required: false
      force:
        description: 'Force building the template even if it already exists'
        type: boolean
        required: false

jobs:
  supported-releases:
    name: Build matrix for supported ADSys and Ubuntu releases
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-supported-releases.outputs.matrix }}
    steps:
      - name: Install needed binaries
        run: |
          sudo DEBIAN_FRONTEND=noninteractive apt update
          sudo DEBIAN_FRONTEND=noninteractive apt install -y distro-info
      - name: Build matrix
        id: set-supported-releases
        run: |
          set -eu

          all="$(distro-info --supported-esm) $(distro-info --supported)"
          all="$(echo $all | tr ' ' '\n' | sort -u)"

          releases=""

          for r in ${all}; do
              # Filter out unsupported LTS releases
              if [ "${r}" = "trusty" -o "${r}" = "xenial" -o "${r}" = "bionic" ]; then
                  continue
              fi

              if [ -n "${releases}" ]; then
                  releases="${releases}, "
              fi
              releases="${releases}'${r}'"
          done

          echo matrix=\"${releases}\" >> $GITHUB_OUTPUT
  build-template:
    name: Build VM template
    runs-on: ubuntu-latest
    needs:
      - supported-releases
    strategy:
      matrix:
        codename: ${{ fromJSON(format('[{0}]', inputs.codename || needs.supported-releases.outputs.matrix)) }}
      fail-fast: false
    steps:
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version-file: go.mod
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AZURE_SSH_KEY }}" > ~/.ssh/id_rsa-integration
          chmod 600 ~/.ssh/id_rsa-integration
      - name: Check if template needs to be created
        continue-on-error: true
        id: check-vm-template
        run: |
          set -o pipefail
          if [ "${{ inputs.force }}" = "true" ]; then
              force="--force"
          fi
          go run ./e2e/cmd/00_check_vm_image --codename ${{ matrix.codename }} ${force} | tee image_urn.txt

      # These steps only run if the template needs to be created
      - uses: ./.github/actions/azure-sstpc-vpn
        if: steps.check-vm-template.outcome == 'success'
        with:
          gateway: ${{ secrets.VPN_GATEWAY }}
          ca: ${{ secrets.VPN_CA }}
          cert: ${{ secrets.VPN_CERT }}
          key: ${{ secrets.VPN_KEY }}
      # - name: Start SSH session
      #   if: steps.check-vm-template.outcome == 'success'
      #   uses: GabrielNagy/debug-via-ssh@main
      #   with:
      #     NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
      #     SSH_PASS: ${{ secrets.SSH_PASSWORD }}
      - name: Build base VM
        if: steps.check-vm-template.outcome == 'success'
        run: |
          URN=$(cat image_urn.txt)
          go run ./e2e/cmd/01_prepare_base_vm --vm-image ${URN} --codename ${{ matrix.codename }} --ssh-key ~/.ssh/id_rsa-integration
      - name: Create template version
        if: steps.check-vm-template.outcome == 'success'
        run: |
          echo asd
          go run ./e2e/cmd/02_create_vm_template
